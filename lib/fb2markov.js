// Generated by CoffeeScript 1.6.3
var getInbox, getMessageCount, getThreads, makeQuery, testAPI,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

testAPI = function() {
  console.log("Welcome!  Fetching your information.... ");
  return FB.api("/me", function(response) {
    return console.log("Good to see you, " + response.name + ".");
  });
};

makeQuery = function(queryText, cb) {
  return FB.api({
    method: "fql.query",
    query: queryText
  }, cb);
};

getThreads = function() {
  var handleThreads, threadList;
  threadList = [];
  handleThreads = function(threadList) {
    var id, num, _results;
    _results = [];
    for (num in threadList) {
      id = threadList[num];
      _results.push(threadList.push(id['thread_id']));
    }
    return _results;
  };
  makeQuery("SELECT thread_id FROM thread WHERE folder_id = 0", handleThreads);
  return threadList;
};

getMessageCount = function(thread_id, countCB) {
  var parseCount;
  parseCount = function(messageCount) {
    console.log("messageCount: " + (parseInt(messageCount[0]["message_count"])));
    return countCB(parseInt(messageCount[0]["message_count"]));
  };
  makeQuery("SELECT message_count FROM thread WHERE 		thread_id = " + thread_id + " LIMIT 1", parseCount);
};

this.API_LIMIT = 4;

getInbox = function() {
  var messageFetcher;
  messageFetcher = function(count) {
    var i, iterationsNeeded, lastMessage, messageContainer, messageInterpretor, randomSegment, segment, segments;
    messageInterpretor = function(lastResponse) {
      var num, val;
      for (num in lastResponse) {
        val = lastResponse[num];
        if (!messageContainer[val["author_id"]]) {
          console.log("Adding author to container " + val['author_id']);
          messageContainer[val["author_id"]] = [];
        }
        messageContainer[val["author_id"]].push(val["body"]);
      }
    };
    lastMessage = function(lastResponse) {
      var num, val;
      for (num in lastResponse) {
        val = lastResponse[num];
        if (!messageContainer[val["author_id"]]) {
          console.log("Adding author to container " + val['author_id']);
          messageContainer[val["author_id"]] = [];
        }
        messageContainer[val["author_id"]].push(val["body"]);
      }
      console.log("container! " + (JSON.stringify(messageContainer)));
    };
    iterationsNeeded = count / 30;
    if (iterationsNeeded > 10) {
      segments = [];
      i = 0;
      while (i < this.API_LIMIT) {
        randomSegment = Math.floor(Math.random() * iterationsNeeded);
        if (__indexOf.call(segments, randomSegment) < 0) {
          segments.push(randomSegment);
          i += 1;
        }
      }
    }
    messageContainer = {};
    for (i in segments) {
      segment = segments[i];
      if (parseInt(i) === this.API_LIMIT - 1) {
        makeQuery("SELECT thread_id, body, author_id, created_time 					FROM message WHERE thread_id = 1162160143849 					ORDER BY created_time ASC LIMIT " + (segment * 30) + "," + ((segment * 30) + 30), lastMessage);
      }
      makeQuery("SELECT thread_id, body, author_id, created_time 				FROM message WHERE thread_id = 1162160143849 				ORDER BY created_time ASC LIMIT " + (segment * 30) + "," + ((segment * 30) + 30), messageInterpretor);
    }
  };
  return getMessageCount("1162160143849", messageFetcher);
};

window.fbAsyncInit = function() {
  FB.init({
    appId: "364959256980832",
    status: true,
    cookie: true,
    xfbml: true
  });
  return FB.Event.subscribe("auth.authResponseChange", function(response) {
    if (response.status === "connected") {
      return getInbox();
    } else if (response.status === "not_authorized") {
      return FB.login();
    } else {
      return FB.login();
    }
  });
};

(function(d) {
  var id, js, ref;
  js = void 0;
  id = "facebook-jssdk";
  ref = d.getElementsByTagName("script")[0];
  if (d.getElementById(id)) {
    return;
  }
  js = d.createElement("script");
  js.id = id;
  js.async = true;
  js.src = "https://connect.facebook.net/en_US/all.js";
  return ref.parentNode.insertBefore(js, ref);
})(document);
